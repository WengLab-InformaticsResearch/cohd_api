openapi: 3.0.1
info:
  description: |
    The Columbia Open Health Data (COHD) API provides access to counts and frequencies (i.e., EHR prevalence) of conditions, procedures, drug exposures, and patient demographics, and the co-occurrence frequencies between them. Count and frequency data were derived from the [Columbia University Medical Center's](http://www.cumc.columbia.edu/) [OHDSI](https://www.ohdsi.org/) database including inpatient and outpatient data. Counts are the number of patients associated with the concept, e.g., diagnosed with a condition, exposed to a drug, or who had a procedure. Frequencies are the number of unique patients associated with the concept divided by the total number of patients in the dataset, i.e., prevalence in the electronic health records. To protect patient privacy, all concepts and pairs of concepts where the count <= 10 were excluded, and counts were randomized by the Poisson distribution.         
    
    Four datasets are available: 
    1) 5-year non-hierarchical dataset: Includes clinical data from 2013-2017  
    2) lifetime non-hierarchical dataset: Includes clinical data from all dates  
    3) 5-year hierarchical dataset: Counts for each concept include patients from descendant concepts. Includes clinical data from 2013-2017.
    4) BETA! Temporal co-occurrence data
    
    In the 5-year hierarchical data set, the counts for each concept include the patients from all descendant concepts. For example, the count for ibuprofen (ID 1177480) includes patients with Ibuprofen 600 MG Oral Tablet (ID 19019073 patients), Ibuprofen 400 MG Oral Tablet (ID 19019072), Ibuprofen 20 MG/ML Oral Suspension (ID 19019050), etc. 

    While the lifetime dataset captures a larger patient population and range of concepts, the 5-year dataset has better underlying data consistency. 
    
    Clinical concepts (e.g., conditions, procedures, drugs) are coded by their standard concept ID in the [OMOP Common Data Model](https://github.com/OHDSI/CommonDataModel/wiki). API methods are provided to map to/from other vocabularies supported in OMOP and other ontologies using the EMBL-EBI Ontology Xref Service (OxO). 


    The following resources are available through this API: 


    1. Metadata: Metadata on the COHD database, including dataset descriptions, number of concepts, etc. 


    2. OMOP: Access to the common vocabulary for name and concept identifier mapping


    3. Clinical Frequencies: Access to the counts and frequencies of conditions, procedures, and drug exposures, and the associations between them. Frequency was determined as the number of patients with the code(s) / total number of patients. 


    4. Concept Associations: Inferred associations between concepts using chi-square analysis, ratio between observed to expected frequency, and relative frequency. 
    
    
    A [Python notebook](https://github.com/WengLab-InformaticsResearch/cohd_api/blob/master/notebooks/COHD_API_Example.ipynb) demonstrates simple examples of how to use the COHD API.


    COHD was developed at the [Columbia University Department of Biomedical Informatics](https://www.dbmi.columbia.edu/) as a collaboration between the [Weng Lab](http://people.dbmi.columbia.edu/~chw7007/), [Tatonetti Lab](http://tatonettilab.org/), and the [NCATS Biomedical Data Translator](https://ncats.nih.gov/translator) program (Red Team). This work was supported in part by grants: NCATS OT3TR002027, NLM R01LM009886-08A1, and NIGMS R01GM107145.
    
    The following external resources may be useful:  
    [OHDSI](https://www.ohdsi.org/)  
    [OMOP Common Data Model](https://github.com/OHDSI/CommonDataModel/wiki)  
    [Athena](http://athena.ohdsi.org) (OMOP vocabularies, search, concept relationships, concept hierarchy)  
    [Atlas](http://www.ohdsi.org/web/atlas/) (OMOP vocabularies, search, concept relationships, concept hierarchy, concept sets)      
  version: 4.0.0
  title: Columbia Open Health Data (COHD)
  contact:
    name: Casey Ta
    email: ct2865@cumc.columbia.edu
    x-role: responsible developer
    url: 'http://chunhualab.org/'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: 'http://cohd.nsides.io/terms/'
  x-accessRestriction: none
  x-implementationLanguage: Python
  x-translator:
    component: KP
    team:
      - Clinical Data Provider
    biolink-version: 1.8.2
    externalDocs:
      description: >-
        The values for component and team are restricted according to this
        external JSON schema. See schema and examples at url
      url: https://github.com/NCATSTranslator/translator_extensions/blob/\
        production/x-translator/
  x-trapi:
    version: 1.1.2
    externalDocs:
      description: >-
        The values for version are restricted according to the regex in
        this external JSON schema. See schema and examples at url
      url: https://github.com/NCATSTranslator/translator_extensions/blob/\
        production/x-trapi/
servers:
  - url: 'https://cohd.io/api/'
    description: COHD production server
externalDocs:
  description: >-
    Documentation for the NCATS Biomedical Translator Reasoners web services
  url: https://github.com/NCATSTranslator/ReasonerAPI
tags:
  - name: Metadata
    description: COHD metadata
  - name: OMOP
    description: OMOP Common Data Model concepts
  - name: Clinical Frequencies
    description: Clinical frequency data
  - name: Concept Associations
    description: Estimated association between concepts
  - name: Temporal Clinical Data
    description: Concept-age distributions, concept-pair delta distributions, and temporal analyses
  - name: predicates
    description: Get supported relationships by source and target
  - name: query
    description: Query reasoner using a predefined question type
  - name: translator
    description: Required for SmartAPI validation of x-translator
  - name: trapi
    description: Required for SmartAPI validation of x-trapi
x-externalResources:
  - x-url: 'https://www.dbmi.columbia.edu/'
    x-type: website
    x-description: "Department of Biomedical Informatics, Columbia University"
  - x-url: 'https://www.ohdsi.org/'
    x-type: website
    x-description: "Observational Health Data Sciences and Informatics"
  - x-url: 'https://github.com/OHDSI/CommonDataModel/wiki'
    x-type: website
    x-description: "OMOP CDM"
paths:
  /metadata/datasets:
    get:
      tags:
        - Metadata
      summary: Enumerates the datasets available in COHD
      description: 'Returns a list of datasets, including dataset ID, name, and description.'
      operationId: datasets
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of dataset descriptions.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        dataset_name:
                          type: string
                          example: '5-year non-hierarchical'                      
                        dataset_id:
                          type: integer
                          example: 1
                        dataset_description: 
                          type: string
                          example: '5-year non-hierarchical dataset: Includes clinical data from 2013-2017'
  /metadata/domainCounts:
    get:
      tags:
        - Metadata
      summary: The number of concepts in each domain
      description: Returns a list of domains and the number of concepts in each domain.
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
      operationId: domainCounts
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of domain counts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        dataset_id:
                          type: integer
                          example: 1
                        domain_id: 
                          type: string
                          example: 'Condition'
                        count:
                          type: integer
                          example: 1000  
  /metadata/domainPairCounts:
    get:
      tags:
        - Metadata
      summary: The number of pairs of concepts in each pair of domains
      description: >-
        Returns a list of pairs of domains and the number of pairs of concepts in each.
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
      operationId: domainPairCounts
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of domain pair counts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        dataset_id:
                          type: integer
                          example: 1
                        domain_id_1: 
                          type: string
                          example: 'Condition'
                        domain_id_2: 
                          type: string
                          example: 'Drug'
                        count:
                          type: integer
                          example: 1000  
  /metadata/patientCount:
    get:
      tags:
        - Metadata
      summary: The number of patients in the dataset
      description: Returns the number of patients in the dataset.
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
      operationId: patientCount
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of patient counts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        dataset_id:
                          type: integer
                          example: 1
                        count:
                          type: integer
                          example: 100000  
  /omop/concepts:
    get:
      tags:
        - OMOP
      summary: Concept definitions from concept ID
      description: >-
        Returns the OMOP concept names and domains for the given list of concept IDs.
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: >-
            A comma separated list of OMOP concept ids, e.g., "192855" or "192855,2008271"
          example: '192855,2008271'
      operationId: concepts
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of concepts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        concept_id:
                          type: integer
                          example: 192855
                        concept_name:
                          type: string
                          example: "Cancer in situ of urinary bladder"
                        domain_id:
                          type: string
                          example: "Condition"
                        vocabulary_id:
                          type: string
                          example: "SNOMED"
                        concept_class_id:
                          type: string
                          example: "Clinical Finding"
                        concept_code:
                          type: string
                          example: "92546004"                          
  /omop/findConceptIDs:
    get:
      tags:
        - OMOP
      summary: Search for OMOP concepts by name and domain
      description: >-
        Searches the OMOP concept table for concept names similar to the query. Returns a list of concepts, including their names and IDs, sorted in decreasing order by the concept's prevalence. 
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: 'The name of the concept to search for, e.g., "cancer" or "ibuprofen"'
          example: cancer
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: 'The dataset to reference when sorting concepts by their frequency. Default: 5-year dataset.'
          example: 1
        - name: domain
          in: query
          required: false
          schema:
            type: string
          description: 'The domain (e.g., "Condition", "Drug", "Procedure") to restrict the search to. If not specified, the search will be unrestricted. See /metadata/domainCounts for a list of valid domain IDs.'
          example: 'Condition'
        - name: min_count
          in: query
          required: false
          schema:
            type: integer
          description: 'The minimum concept count (inclusive) to include a concept in the search results. Setting the min_count to 0 will cause findConceptIDs to return all matching standard OMOP concepts (this can be slow). Setting the min_count to 1 will cause findConceptIDs to only return concepts with count data (much faster). Default: 1.'
          example: 1
      operationId: findConceptIDs
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of concepts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        concept_class_id: 
                          type: string
                          example: "Clinical Finding"
                        concept_code: 
                          type: string
                          example: "92546004"
                        concept_count: 
                          type: integer
                          example: 368
                        concept_id: 
                          type: integer
                          example: 192855
                        concept_name: 
                          type: string
                          example: "Cancer in situ of urinary bladder"
                        domain_id: 
                          type: string
                          example: "Condition"
                        vocabulary_id: 
                          type: string
                          example: "SNOMED"
  /omop/conceptAncestors:
    get:
      tags:
        - OMOP
      summary: Retrieve the concept's hierarchical ancestors
      description: >-
        Retrieves the given concept's hierarchical ancestors and their counts. The hierarchical definitions were derived from the OMOP concept_ancestor table. For more information, see the documentation on OMOP's concept_ancestor table on [ohdsi.org](http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:concept_ancestor) and [GitHub](https://github.com/OHDSI/CommonDataModel/wiki/CONCEPT_ANCESTOR).
      parameters:
        - name: concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept ID, e.g., 19019073'
          example: 19019073
        - name: vocabulary_id
          in: query
          required: false
          schema:
            type: string
          description: 'The vocabulary_id to restrict ancestors to. For conditions, SNOMED and MedDRA are used. For drugs, RxNorm (only and ATC are used. For procedures, SNOMED, MedDRA, and ICD10PCS are used. Default: unrestricted'
          example: 'RxNorm'
        - name: concept_class_id
          in: query
          required: false
          schema:
            type: string
          description: 'The concept_class_id to restrict ancestors to. Only certain hierarchical concept_class_ids are used in each vocabuarly: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Default: unrestricted'
          example: 'Ingredient'
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: 'The dataset_id to retrieve counts from. Default: 3 (5-year hierarchical data set)'
          example: 3
      operationId: conceptAncestors
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of concepts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:   
                        ancestor_concept_id: 
                          type: integer
                          example: 1177480
                        concept_class_id: 
                          type: string
                          example: "Ingredient"
                        concept_code:  
                          type: string
                          example: "5640"
                        concept_count: 
                          type: integer
                          example: 233514
                        concept_name: 
                          type: string
                          example: "Ibuprofen"
                        domain_id: 
                          type: string
                          example: "Drug"
                        max_levels_of_separation: 
                          type: integer
                          example: 2
                        min_levels_of_separation: 
                          type: integer
                          example: 2
                        standard_concept: 
                          type: string
                          example: "S"
                        vocabulary_id: 
                          type: string
                          example: "RxNorm"
  /omop/conceptDescendants:
    get:
      tags:
        - OMOP
      summary: Retrieve the concept's hierarchical descendants
      description: >-
        Retrieves the given concept's hierarchical descendants and their counts. The hierarchical definitions were derived from the OMOP concept_ancestor table. See the documentation on OMOP's concept_ancestor table on [ohdsi.org](http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:concept_ancestor) and [GitHub](https://github.com/OHDSI/CommonDataModel/wiki/CONCEPT_ANCESTOR).
      parameters:
        - name: concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept ID, e.g., 313217'
          example: 313217
        - name: vocabulary_id
          in: query
          required: false
          schema:
            type: string
          description: 'The vocabulary_id to restrict ancestors to. For conditions, SNOMED and MedDRA are used. For drugs, RxNorm and ATC are used. For procedures, SNOMED, MedDRA, and ICD10PCS are used. Default: unrestricted'
          example: 
        - name: concept_class_id
          in: query
          required: false
          schema:
            type: string
          description: 'The concept_class_id to restrict ancestors to. Only certain hierarchical concept_class_ids are used in each vocabuarly: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Default: unrestricted'
          example: 
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: 'The dataset_id to retrieve counts from. Default: 3 (5-year hierarchical data set)'
          example: 3   
      operationId: conceptDescendants
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of concepts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:       
                        concept_class_id: 
                          type: string
                          example: "Clinical Finding"
                        concept_code:  
                          type: string
                          example: "49436004"
                        concept_count:  
                          type: integer
                          example: 53272
                        concept_name:  
                          type: string
                          example: "Atrial fibrillation"
                        descendant_concept_id:   
                          type: integer
                          example: 313217
                        domain_id:  
                          type: string
                          example: "Condition"
                        max_levels_of_separation:   
                          type: integer
                          example: 0
                        min_levels_of_separation:   
                          type: integer
                          example: 0
                        standard_concept:  
                          type: string
                          example: "S"
                        vocabulary_id:  
                          type: string
                          example: "SNOMED"                      
  /omop/mapToStandardConceptID:
    get:
      tags:
        - OMOP
      summary: Map from a non-standard concept code to a standard OMOP concept ID
      description: >-
        Uses the OMOP concept_relationship table to map from a non-standard concept code (e.g., ICD9CM 715.3) to a standard OMOP concept ID (e.g., 72990). This method may return multiple results if vocabulary_id is not specified and the concept_code is not unique across vocabularies. If both concept_code and vocabulary_id are specified, then 1 result will be returned at most. 
      parameters:
        - name: concept_code
          in: query
          required: true
          schema:
            type: string
          description: 'The concept code to map from, e.g., 715.3'
          example: '715.3'
        - name: vocabulary_id
          in: query
          required: false
          schema:
            type: string
          description: >-
            The vocabulary (e.g., "ICD9CM") that the concept code belongs to. If this parameter is not specified, the method will return mappings from any source vocabulary with matching concept code. See /omop/vocabularies for the list of supported vocabularies.
          example: ICD9CM
      operationId: mapToStandardConceptID
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of concepts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:      
                        source_concept_code: 
                          type: string
                          example: "715.3"
                        source_concept_id:   
                          type: integer
                          example: 44834979
                        source_concept_name:  
                          type: string
                          example: "Osteoarthrosis, localized, not specified whether primary or secondary"
                        source_vocabulary_id:  
                          type: string
                          example: "ICD9CM"
                        standard_concept_id:  
                          type: integer
                          example: 72990
                        standard_concept_name:  
                          type: string
                          example: "Localized osteoarthrosis uncertain if primary OR secondary"
                        standard_domain_id:  
                          type: string
                          example: "Condition"                      
  /omop/mapFromStandardConceptID:
    get:
      tags:
        - OMOP
      summary: >-
        Map from a standard concept ID to concept code(s) in an external vocabulary
      description: >-
        Uses the OMOP concept_relationship table to map from a standard concept ID (e.g., 72990) to concept code(s) (e.g., ICD9CM 715.3, 715.31, 715.32, etc.). An OMOP standard concept ID may map to many concepts in the external vocabulary.
      parameters:
        - name: concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'The standard OMOP concept id to map from, e.g., 72990'
          example: 72990
        - name: vocabulary_id
          in: query
          required: false
          schema:
            type: string
          description: >-
            The vocabulary (e.g., "ICD9CM") to map to. If this parameter is not specified, the method will return mappings to any matching vocabularies. See /omop/vocabularies for the list of supported vocabularies.
          example: ICD9CM
      operationId: mapFromStandardConceptID
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of concepts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:      
                        concept_class_id: 
                          type: string
                          example: "4-dig nonbill code"
                        concept_code: 
                          type: string
                          example: "715.3"
                        concept_id: 
                          type: integer
                          example: 44834979
                        concept_name: 
                          type: string
                          example: "Osteoarthrosis, localized, not specified whether primary or secondary"
                        domain_id: 
                          type: string
                          example: "Condition"
                        standard_concept: 
                          type: string
                          example: null
                        vocabulary_id: 
                          type: string
                          example: "ICD9CM"                      
  /omop/vocabularies:
    get:
      tags:
        - OMOP
      summary: List of vocabularies
      description: >-
        List of vocabulary_ids. Useful if you need to use /omop/mapToStandardConceptID to map a concept code from a source vocabulary to the OMOP standard vocabulary.
      operationId: vocabularies
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of vocabularies.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:      
                        vocabulary_id: 
                          type: string
                          example: "SNOMED"
  /omop/xrefToOMOP:
    get:
      tags:
        - OMOP
      summary: Cross-reference from an ontology to OMOP standard concepts using the Ontology Xref Service
      description: >-
        Attempts to map a concept from an external ontology to an OMOP standard concept ID using the EMBL-EBI Ontology Xref Service (OxO): https://www.ebi.ac.uk/spot/oxo/index. This method attempts to use OxO to map from the original ontology to an intermediate ontology that is included in OMOP (ICD9CM, ICD10CM, SNOMEDCT, and MeSH), then uses the OMOP mappings to the standard concepts. Multiple mappings may be returned. Results are sorted by total_distance (OxO distance + OMOP distance) in ascending order.
      parameters:
        - name: curie
          in: query
          required: true
          schema:
            type: string
          description: 'Compact URI (CURIE) of the concept to map, e.g., DOID:8398'
          example: 'DOID:8398'
        - name: distance
          in: query
          required: false
          schema:
            type: integer
          description: >-
            Mapping distance for OxO. Note: this is the distance used in the OxO API to map from the original concept to an ICD9CM, ICD10CM, SNOMEDCT, or MeSH concept. One additional step may be taken by the COHD API to map to the OMOP standard concept. Default: 2.
          example: 2
        - name: local
          in: query
          required: false
          schema:
            type: boolean
          description: >-
            COHD can either call the OxO API or use the local implementation of OxO. The full call to the OxO API will have the most updated mappings and term definitions, but is slower. The local implementation of OxO is faster but may contain outdated mappings and term definitions. If the parameter is false, COHD will call the full OxO API. If the parameter is true, COHD will use the local implementation.  Default: false.
          example: false
        - name: recommend
          in: query
          required: false
          schema:
            type: boolean
          description: >-
            By default (false), COHD returns all mappings found. If true, COHD will recommend a mapping based on path distances. Default: false.
          example: false
      operationId: xrefToOMOP
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of mappings from external concepts to OMOP concepts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:      
                        intermediate_oxo_id: 
                          type: string
                          example: "ICD9CM:715.3"
                        intermediate_oxo_label: 
                          type: string
                          example: ""
                        omop_concept_name: 
                          type: string
                          example: "Localized osteoarthrosis uncertain if primary OR secondary"
                        omop_distance: 
                          type: integer
                          example: 1
                        omop_domain_id: 
                          type: string
                          example: "Condition"
                        omop_standard_concept_id: 
                          type: integer
                          example: 72990
                        oxo_distance: 
                          type: integer
                          example: 1
                        source_oxo_id: 
                          type: string
                          example: "DOID:8398"
                        source_oxo_label: 
                          type: string
                          example: "osteoarthritis"
                        total_distance: 
                          type: integer
                          example: 2
  /omop/xrefFromOMOP:
    get:
      tags:
        - OMOP
      summary: Cross-reference from an ontology to OMOP standard concepts using the Ontology Xref Service
      description: >-
        Attempts to map a concept from an external ontology to an OMOP standard concept ID using the EMBL-EBI Ontology Xref Service (OxO): https://www.ebi.ac.uk/spot/oxo/index. This method maps from the OMOP standard concept to an intermediate vocabulary included is OxO (ICD9CM, ICD10CM, SNOMEDCT, and MeSH), then uses the OxO API to map to other ontologies. Multiple mappings may be returned. Results are sorted by total_distance (OxO distance + OMOP distance) in ascending order.
      parameters:
        - name: concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'OMOP standard concept_id to map, e.g., 192855'
          example: 192855
        - name: mapping_targets
          in: query
          required: false
          schema:
            type: string 
          description: 'Target ontologies for OxO. Comma separated target prefixes, e.g., "DOID,UMLS"'
          example: 'UMLS'
        - name: distance
          in: query
          required: false
          schema:
            type: integer
          description: >-
            Mapping distance for OxO. Note: this is the distance used in the OxO API to map from an ICD9CM, ICD10CM, SNOMEDCT, or MeSH concept to the desired ontology. One additional step may be taken by the COHD API to map to the OMOP standard concept to ICD9CM, ICD10CM, SNOMEDCT, or
            MeSH. Default: 2.
          example: 2
        - name: local
          in: query
          required: false
          schema:
            type: boolean
          description: >-
            COHD can either call the OxO API or use the local implementation of OxO. The full call to the OxO API will have the most updated mappings and term definitions, but is slower. The local implementation of OxO is faster but may contain outdated mappings and term definitions. If the parameter is false, COHD will call the full OxO API. If the parameter is true, COHD will use the local implementation.  Default: false.
          example: false
        - name: recommend
          in: query
          required: false
          schema:
            type: boolean
          description: >-
            By default (false), COHD returns all mappings found. If true, COHD will recommend a mapping for each target based on path distances. Default: false.
          example: false
      operationId: xrefFromOMOP
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of mappings from OMOP concepts to external concepts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:      
                        intermediate_omop_concept_code: 
                          type: string
                          example: "92546004"
                        intermediate_omop_concept_id: 
                          type: integer
                          example: 192855
                        intermediate_omop_concept_name: 
                          type: string
                          example: "Cancer in situ of urinary bladder"
                        intermediate_omop_vocabulary_id: 
                          type: string
                          example: "SNOMED"
                        intermediate_oxo_curie: 
                          type: string
                          example: "SNOMEDCT:92546004"
                        intermediate_oxo_label: 
                          type: string
                          example: "Cancer in situ of urinary bladder"
                        omop_distance: 
                          type: integer
                          example: 0
                        oxo_distance: 
                          type: integer
                          example: 1
                        source_omop_concept_code: 
                          type: string
                          example: "92546004"
                        source_omop_concept_id: 
                          type: integer
                          example: 192855
                        source_omop_concept_name: 
                          type: string
                          example: "Cancer in situ of urinary bladder"
                        source_omop_vocabulary_id: 
                          type: string
                          example: "SNOMED"
                        target_curie: 
                          type: string
                          example: "UMLS:C0154091"
                        target_label: 
                          type: string
                          example: "Cancer in situ of urinary bladder"
                        total_distance: 
                          type: integer
                          example: 1
  /frequencies/singleConceptFreq:
    get:
      tags:
        - Clinical Frequencies
      summary: Clinical frequency of individual concepts
      description: >-
        Retrieves observed clinical frequencies of individual concepts. Multiple concepts may be requested in a comma separated list.
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: >-
            A comma separated list of OMOP concept ids, e.g., "192855" or "192855,2008271"
          example: '192855'
      operationId: singleConceptFreq
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of single concept frequencies.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:   
                        concept_count: 
                          type: integer
                          example: 368
                        concept_frequency: 
                          type: integer
                          example: 0.0002055371025188907
                        concept_id: 
                          type: integer
                          example: 192855
                        dataset_id: 
                          type: integer
                          example: 1                      
  /frequencies/pairedConceptFreq:
    get:
      tags:
        - Clinical Frequencies
      summary: Clinical frequency of a pair of concepts
      description: Retrieves observed clinical frequencies of a pair of concepts.
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: 'A comma pair of OMOP concept ids, e.g., "192855,2008271"'
          example: '192855,2008271'
      operationId: pairedConceptFreq
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of paired concept frequencies.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:   
                        concept_count: 
                          type: integer
                          example: 10
                        concept_frequency: 
                          type: integer
                          example: 0.000005585247351056813
                        concept_id_1: 
                          type: integer
                          example: 192855
                        concept_id_2: 
                          type: integer
                          example: 2008271
                        dataset_id: 
                          type: integer
                          example: 1                      
  /frequencies/associatedConceptFreq:
    get:
      tags:
        - Clinical Frequencies
      summary: Clinical frequencies of all pairs of concepts given a concept id
      description: >-
        Retrieves observed clinical frequencies of all pairs of concepts given a concept id. Results are returned in descending order of paired concept count. Note that the largest paired concept counts are often dominated by associated concepts with high prevalence.
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
        - name: q
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "192855"'
          example: 192855
      operationId: associatedConceptFreq
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of associated concept frequencies.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        associated_concept_id: 
                          type: integer
                          example: 19041324
                        associated_concept_name: 
                          type: string
                          example: "Acetaminophen 325 MG Oral Tablet [Tylenol]"
                        associated_domain_id: 
                          type: string
                          example: "Drug"
                        concept_count: 
                          type: integer
                          example: 277
                        concept_frequency: 
                          type: integer
                          example: 0.0001547113516242737
                        concept_id: 
                          type: integer
                          example: 192855
                        dataset_id: 
                          type: integer
                          example: 1        
  /frequencies/associatedConceptDomainFreq:
    get:
      tags:
        - Clinical Frequencies
      summary: Clinical frequencies of all pairs of concepts given a concept id
      description: >-
        Retrieves observed clinical frequencies of all pairs of concepts given a concept id restricted by domain of the associated concept_id.  Results are returned in descending order of paired concept count. Note that the largest paired concept counts are often dominated by associated concepts with high prevalence.
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
        - name: concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "192855"'
          example: 192855
        - name: domain
          in: query
          required: true
          schema:
            type: string
          description: 'An OMOP domain id, e.g., "Condition", "Drug", "Procedure", etc. See /metadata/domainCounts for a list of valid domain IDs.'
          example: Procedure
      operationId: associatedConceptDomainFreq
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of associated concept frequencies.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        associated_concept_id: 
                          type: integer
                          example: 2211361
                        associated_concept_name: 
                          type: string
                          example: "Radiologic examination, chest, 2 views, frontal and lateral"
                        associated_domain_id: 
                          type: string
                          example: "Procedure"
                        concept_count: 
                          type: integer
                          example: 257
                        concept_frequency: 
                          type: integer
                          example: 0.00014354085692216007
                        concept_id: 
                          type: integer
                          example: 192855
                        dataset_id: 
                          type: integer
                          example: 1                        
  /frequencies/mostFrequentConcepts:
    get:
      tags:
        - Clinical Frequencies
      summary: Most frequent concepts [by domain]
      description: Retrieves the most frequent concepts.
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
        - name: q
          in: query
          required: false
          schema:
            type: integer
          description: '(Optional) The number of concepts to retreieve, e.g., 100. 0 or unspecified will return all matching concepts.'
          example: 100
        - name: domain
          in: query
          required: false
          schema:
            type: string
          description: '(Optional) The domain_id to restrict to, e.g., "Condition", "Drug", "Procedure". See /metadata/domainCounts for a list of valid domain IDs.'
          example: 'Condition'
        - name: vocabulary_id
          in: query
          required: false
          schema:
            type: string
          description: '(Optional) The vocabulary_id(s) to restrict to, e.g., "SNOMED", "MedDRA", "RxNorm", "ATC" etc. Comma separated to include multiple vocabularies, e.g., "SNOMED,MedDRA". Default: unrestricted'
          example: 
        - name: concept_class_id
          in: query
          required: false
          schema:
            type: string
          description: '(Optional) The concept_class_id(s) to restrict to. concept_class_ids are specific to each vocabulary, e.g.,: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Comma separated to include multiple concept_class_ids, e.g., "PT,HLT". Default: unrestricted'
          example:           
      operationId: mostFrequentConcepts
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of most frequent concepts.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        concept_class_id: 
                          type: string
                          example: "Clinical Finding"
                        concept_count: 
                          type: integer
                          example: 233790
                        concept_frequency: 
                          type: integer
                          example: 0.1305774978203572
                        concept_id: 
                          type: integer
                          example: 320128
                        concept_name: 
                          type: string
                          example: "Essential hypertension"
                        dataset_id: 
                          type: integer
                          example: 1
                        domain_id: 
                          type: string
                          example: "Condition"
                        vocabulary_id: 
                          type: string
                          example: "SNOMED"                      
  /association/chiSquare:
    get:
      tags:
        - Concept Associations
      summary: Chi-square analysis on pairs of concepts
      description: >
        Returns the chi-square statistic and p-value between pairs of concepts. Results are returned in descending order of the chi-square statistic. Note that due to large sample sizes, the chi-square can become very large. 
        
        
        The expected frequencies for the chi-square analysis are calculated based on the single concept frequencies and assuming independence between concepts. P-value is calculated with 1 DOF. 


        This method has overloaded behavior based on the specified parameters:


        1) concept_id_1 and concept_id_2: Result for the pair (concept_id_1, concept_id_2)

        2) concept_id_1: Results for all pairs of concepts that include concept_id_1

        3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
        - name: concept_id_1
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "192855"'
          example: 192855
        - name: concept_id_2
          in: query
          required: false
          schema:
            type: integer
          description: >-
            An OMOP concept id, e.g., "2008271". If this parameter is specified, then the chi-square between concept_id_1 and concept_id_2 is returned. If this parameter is not specified, then a list of chi-squared results between concept_id_1 and other concepts is returned.
          example: 2008271
        - name: domain
          in: query
          required: false
          schema:
            type: string
          description: >-
            An OMOP domain id, e.g., "Condition", "Drug", "Procedure", etc., to restrict the associated concept (concept_id_2) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.
          example: Drug
        - name: concept_class
          in: query
          required: false
          schema:
            type: string
          description: >-
            An OMOP concept_class_id, e.g., "Ingredient", to restrict the associated concept (concept_id_2) to. If this
            parameter is not specified, then the concept_class_id is unrestricted. Example useful usage would be to have
            domain="Drug" and concept_class="Ingredient"
          example: Ingredient
      operationId: chiSquare
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of concept pairs and chi-squared values.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        chi_square: 
                          type: integer
                          example: 370026.1780081638
                        concept_2_domain: 
                          type: string
                          example: "Procedure"
                        concept_2_name: 
                          type: string
                          example: "Instillation of therapeutic substance into bladder"
                        concept_id_1: 
                          type: integer
                          example: 192855
                        concept_id_2: 
                          type: integer
                          example: 4021588
                        dataset_id: 
                          type: integer
                          example: 3
                        p-value: 
                          type: number
                          example: 0.0314
                        adj_p-value:
                          type: number
                          example: 0.0314
                          description: >-
                            Bonferonni adjusted p-value, adjusted with the total number of pairs of concepts in the
                            dataset.
      x-bte-kgs-operations:
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Condition
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/chi_square'
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Drug
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/chi_square'
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Condition
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/chi_square'
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Drug
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/chi_square'
  /association/obsExpRatio:
    get:
      tags:
        - Concept Associations
      summary: Observed Count / Expected Count
      description: >
        Returns the natural logarithm of the ratio between the observed count and expected count. Expected count is calculated from the single concept frequencies and assuming independence between the concepts. Results are returned in descending order of ln_ratio.
        
        
        expected_count = Count_1_and_2 * num_patients / (Count_1 * Count_2)


        ln_ratio = ln(expected_count)
        

        This method has overloaded behavior based on the specified parameters:


        1) concept_id_1 and concept_id_2: Results for the pair (concept_id_1, concept_id_2)

        2) concept_id_1: Results for all pairs of concepts that include concept_id_1

        3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
        - name: concept_id_1
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "192855"'
          example: 192855
        - name: concept_id_2
          in: query
          required: false
          schema:
            type: integer
          description: >-
            An OMOP concept id, e.g., "2008271". If concept_id_2 is unspecified, then this method will return all pairs of concepts with concept_id_1.
          example: 2008271
        - name: domain
          in: query
          required: false
          schema:
            type: string
          description: >-
            An OMOP domain id, e.g., "Condition", "Drug", "Procedure", etc., to restrict the associated concept (concept_id_2) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.
          example: Drug
        - name: concept_class
          in: query
          required: false
          schema:
            type: string
          description: >-
            An OMOP concept_class_id, e.g., "Ingredient", to restrict the associated concept (concept_id_2) to. If this
            parameter is not specified, then the concept_class_id is unrestricted. Example useful usage would be to have
            domain="Drug" and concept_class="Ingredient"
          example: Ingredient
        - name: confidence
          in: query
          required: false
          schema:
            type: number
          description: >-
            The confidence level used for calculating confidence intervals (default 0.99).
          example: 0.99
      operationId: obsExpRatio
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of paired concepts and observed-expected frequency ratio.
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items: 
                      type: object
                      properties:
                        concept_2_domain: 
                          type: string
                          example: "Procedure"
                        concept_2_name: 
                          type: string
                          example: "Closed [transurethral] biopsy of bladder"
                        concept_id_1: 
                          type: integer
                          example: 192855
                        concept_id_2: 
                          type: integer
                          example: 2003784
                        dataset_id: 
                          type: integer
                          example: 1
                        expected_count: 
                          type: integer
                          example: 0.060838982345591645
                        ln_ratio: 
                          type: integer
                          example: 7.561698473261244
                        observed_count: 
                          type: integer
                          example: 117
      x-bte-kgs-operations:
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Condition
            confidence: 0.99
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/obs_exp_ratio'
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Drug
            confidence: 0.99
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/obs_exp_ratio'
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Condition
            confidence: 0.99
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/obs_exp_ratio'
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Drug
            confidence: 0.99
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/obs_exp_ratio'
  /association/relativeFrequency:
    get:
      tags:
        - Concept Associations
      summary: Relative frequency between pairs of concepts
      description: >
        Calculates the relative frequency (i.e., conditional probability) between pairs of concepts. Results are returned in descending order of relative frequency. Note that due to the randomization of the counts, the calculated relative frequencies can exceed the limit of 1.0.


        Relative Frequency = Count_1_and_2 / Count_2


        This method has overloaded behavior based on the specified parameters:


        1) concept_id_1 and concept_id_2: Result for the pair (concept_id_1, concept_id_2)

        2) concept_id_1: Results for all pairs of concepts that include concept_id_1

        3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the dataset to query. Default dataset is the 5-year dataset.
          example: 1
        - name: concept_id_1
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "192855"'
          example: 192855
        - name: concept_id_2
          in: query
          required: false
          schema:
            type: integer
          description: >-
            An OMOP concept id, e.g., "2008271". If concept_id_2 is unspecified, then this method will return all pairs of concepts with concept_id_1.
          example: 2008271
        - name: domain
          in: query
          required: false
          schema:
            type: string
          description: >-
            An OMOP domain id, e.g., "Condition", "Drug", "Procedure", etc., to restrict concept_id_2 (the base concept) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.
          example: Drug
        - name: concept_class
          in: query
          required: false
          schema:
            type: string
          description: >-
            An OMOP concept_class_id, e.g., "Ingredient", to restrict the associated concept (concept_id_2) to. If this
            parameter is not specified, then the concept_class_id is unrestricted. Example useful usage would be to have
            domain="Drug" and concept_class="Ingredient"
          example: Ingredient
        - name: confidence
          in: query
          required: false
          schema:
            type: number
          description: >-
            The confidence level used for calculating confidence intervals (default 0.99).
          example: 0.99
      operationId: relativeFrequency
      responses:
        default:
          description: Unexpected error
        '200':
          description: An array of paired concepts and relative frequency.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        concept_2_count:
                          type: integer
                          example: 82
                        concept_2_domain:
                          type: string
                          example: "Procedure"
                        concept_2_name:
                          type: string
                          example: "Radical cystectomy"
                        concept_id_1:
                          type: integer
                          example: 192855
                        concept_id_2:
                          type: integer
                          example: 2003805
                        concept_pair_count:
                          type: integer
                          example: 29
                        dataset_id:
                          type: integer
                          example: 1
                        relative_frequency:
                          type: integer
                          example: 0.35365853658536583
      x-bte-kgs-operations:
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Condition
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/relative_frequency'
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Drug
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/relative_frequency'
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Disease
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Condition
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/relative_frequency'
        - inputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          outputs:
          - id: biolink:OMOP
            semantic: biolink:Drug
          predicate: biolink:correlated_with
          source: Columbia Open Health Data KP
          supportBatch: false
          parameters:
            concept_id_1: "{inputs[0]}"
            dataset_id: 3
            domain: Drug
          response_mapping:
            $ref: '#/components/x-bte-kgs-response-mappings/relative_frequency'
  /temporal/conceptAgeCounts:
    get:
      tags:
        - Temporal Clinical Data
      summary: Counts of ages when concepts were first observed in a patient
      description: >
        Counts of ages when concepts were first observed in a patient. Different concepts will have different bin_widths.
        All binning schemes start with age 0, and no bin starts with an age > 90. The largest age bin includes all ages
        greater or equal to the starting age of the bin. For example, with a bin_width of 4, the ages of each bin are
        [0-3, 4-7, 8-11, ..., 84-87, 88+]. Counts in each bin are independently perturbed with a Poisson distribution.
        Counts < 10 are suppressed, represented by the value 1. Counts of 0 are reported as 0.
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the data set to query. Default data set is the Temporal Beta data set.
          example: 4
        - name: concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "313217"'
          example: 313217
      operationId: conceptAgeCounts
      responses:
        default:
          description: Unexpected error
        '200':
          description: The concept's age distribution
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        dataset_id:
                          type: integer
                          example: 4
                        concept_id:
                          type: integer
                          example: 313217
                        concept_name:
                          type: string
                          example: "Atrial fibrillation"
                        bin_width:
                          type: integer
                          example: 2
                        counts:
                          type: array
                          description: Array of counts ordered from 0 to the largest bin. 
                          items:
                            type: integer
                            example: 9000
  /temporal/findSimilarAgeDistributions:
    get:
      tags:
        - Temporal Clinical Data
      summary: Find concepts with a similar concept-age distribution
      description: >
        Finds concepts with a similar concept-age distribution as with the desired concept_id.

        Uses Jaccard similarity to compare concept-age distributions
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the data set to query. Default data set is the Temporal Beta data set.
          example: 4
        - name: concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "313217"'
          example: 313217
        - name: exclude_related
          in: query
          required: false
          schema:
            type: boolean
          description: 'True: excludes concepts that frequently co-occur (0-day delta) with concept_id. False: do not exclude. Default is True.'
          example: true 
        - name: restrict_type
          in: query
          required: false
          schema:
            type: boolean
          description: >
            (Optional) True: restricts potentially similar concepts to the same type of concept as concept_id, e.g., 
            the same domain_id for Conditions, Drugs, and Procedures. For drugs, if the concept is an ingredient, also
            restricts concept_class_id to 'Ingredient'.
          example: true   
        - name: threshold
          in: query
          required: false
          schema:
            type: number
          description: Minimum threshold for similarity. Range is 0-1, higher is more similar. Default 0.7.
          example: 0.7  
        - name: limit
          in: query
          required: false
          schema:
            type: integer
          description: Maximum number of concepts to return at each bin width. Default 20.
          example: 20
      operationId: findSimilarAgeDistributions
      responses:
        default:
          description: Unexpected error
        '200':
          description: The concept's age distribution
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        dataset_id:
                          type: integer
                          example: 4
                        concept_id:
                          type: integer
                          example: 313217
                        concept_name:
                          type: string
                          example: "Atrial fibrillation"
                        bin_width:
                          type: integer
                          example: 2
                        counts:
                          type: array
                          description: Array of counts ordered from 0 to the largest bin. 
                          items:
                            type: integer
                            example: 9000                            
  /temporal/conceptPairDeltaCounts:
    get:
      tags:
        - Temporal Clinical Data
      summary: Counts of time deltas between
      description: >
        Counts of time differences (deltas) between when a pair of concepts were first observed in a patient. given
        a pair of concepts (source_concept and target_concept), a positive delta indicates that source_concept was 
        observed before target_concept. Likewise, a negaitve delta indicates that source_concept was observed after
        target_concept. Performing this query with the two concepts swapped will produce a mirrored distribution.   
          
        Bin widths grow exponentially, and different concept pairs will have different bin_widths. The binning schemes
        are as follows (delta bins with negative values mirror the positive delta bins):  
          bin_width=1: [0 day, 1 day, 2-3 days, 4-7 days, 8-15 days, ..., 2048-4095 days (5.6-11.2y), and 4096+ days
          (11.2+ years)].  
          bin_width=2: [0 day, 1-3 days, 4-15 days, 16-63 days, ..., 256-1023 days, 1024+ days (2.8+ years)]  
          bin_width=4: [0 day, 1-15 days, 16-255 days, 256+ days]  
          bin_width=8: [0 day, 1-255 days, 256+ days]  
          bin_width=16: [0 day, 1+ days]  
          The 0-day bin never gets incorporated into larger bins.
            
        Counts in each bin are independently perturbed with a Poisson distribution. Counts < 10 are suppressed,
        represented by the value 1. Counts of 0 are reported as 0.
      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the data set to query. Default data set is the Temporal Beta data set. 
          example: 4
        - name: source_concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "312327"'
          example: 312327
        - name: target_concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "313217"'
          example: 313217          
      operationId: conceptPairDeltaCounts
      responses:
        default:
          description: Unexpected error
        '200':
          description: The concept pair's delta distribution
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        dataset_id:
                          type: integer
                          example: 4
                        source_concept_id:
                          type: integer
                          example: 312327
                        source_concept_name:
                          type: string
                          example: "Acute myocardial infarction"
                        target_concept_id:
                          type: integer
                          example: 313217
                        target_concept_name:
                          type: string
                          example: "Atrial fibrillation"
                        bin_width:
                          type: integer
                          example: 2
                        n:
                          type: integer
                          example: 6
                        counts:
                          type: array
                          description: Array of counts ordered from the most negative bin to the largest positive bin. 
                          items:
                            type: integer
                            example: 9000
  /temporal/sourceToTarget:
    get:
      tags:
        - Temporal Clinical Data
      summary: Temporal relationship between source_concept and target_concept.
      description: >
        Analysis to determine if there's a temporal relationship between the source_concept and the target_concept.  

        Compares the delta distribution between source_concept and target_concept against delta distributions from
        other concepts to the target_concept. Find comparable concepts by measuring similarity of the age distributions
        to the age distribution of the source_concept.

      parameters:
        - name: dataset_id
          in: query
          required: false
          schema:
            type: integer
          description: >-
            The dataset_id of the data set to query. Default data set is the Temporal Beta data set.
          example: 4
        - name: source_concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "312327"'
          example: 312327
        - name: target_concept_id
          in: query
          required: true
          schema:
            type: integer
          description: 'An OMOP concept id, e.g., "313217"'
          example: 313217          
      operationId: sourceToTarget
      responses:
        default:
          description: Unexpected error
        '200':
          description: The concept pair's delta distribution
          content:
            application/json:
              schema:
                type: object
  /predicates:
    get:
      deprecated: true
      tags:
        - predicates
      summary: Get supported relationships by source and target
      responses:
        '200':
          description: Predicates by source and target
          content:
            application/json:
              schema:
                description: Source map
                type: object
                additionalProperties:
                  description: Target map
                  type: object
                  additionalProperties:
                    description: Array of predicates
                    type: array
                    items:
                      type: string
                example:
                  'biolink:ChemicalSubstance':
                    'biolink:Gene':
                      - biolink:directly_interacts_with
                      - biolink:decreases_activity_of
  /meta_knowledge_graph:
    get:
      tags:
        - meta_knowledge_graph
      summary: Meta knowledge graph representation of this TRAPI web service.
      responses:
        '200':
          description: >-
            Returns meta knowledge graph representation of this TRAPI web
            service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaKnowledgeGraph'
  /query:
    post:
      tags:
        - query
      summary: Query COHD following NCATS Translator Reasoner Standard API
      description: >-
        Query the COHD API following the
        [NCATS Translator Reasoner Standard API](https://github.com/NCATSTranslator/ReasonerAPI).
        Only single hop queries are supported. See the example query_graph.
        
        The COHD data are natively represented using OMOP. COHD will attempt to map between Biolink and OMOP both in the
        input and response.
      operationId: query
      requestBody:
        description: Query information to be submitted
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
            example: >-
              {
                "message": {
                  "query_graph": {
                    "nodes": {
                      "n00": {
                        "ids": ["DOID:9053"],
                        "categories": ["biolink:Disease"]
                      },
                      "n01": {
                        "categories": ["biolink:Procedure"]
                      }
                    },
                    "edges": {
                      "e00": {
                        "predicates": ["biolink:correlated_with"],
                        "subject": "n00",
                        "object": "n01"
                      }
                    }
                  }
                },
                "query_options": {
                  "dataset_id": 3,
                  "confidence_interval": 0.99,
                  "min_cooccurrence": 50,
                  "threshold": 0.5,
                  "local_oxo": true,
                  "max_results": 50,
                  "biolink_only": true
                }
              }
      responses:
        '200':
          description: >-
            OK. There may or may not be results. Note that some of the provided
            identifiers may not have been recognized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: >-
            Bad request. The request is invalid according to this OpenAPI
            schema OR a specific identifier is believed to be invalid somehow
            (not just unrecognized).
          content:
            application/json:
              schema:
                type: string
        '500':
          description: >-
            Internal server error.
          content:
            application/json:
              schema:
                type: string
        '501':
          description: >-
            Not implemented.
          content:
            application/json:
              schema:
                type: string
  /translator/biolink_to_omop:
    post:
      tags:
        - translator
      summary: 'Map from Biolink to OMOP'
      description: >-
        Map Biolink CURIEs to OMOP concepts
      operationId: biolink_to_omop
      requestBody:
        description: List of CURIEs
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurieList'
            example: >-
              {
                  "curies": [
                      "HP:0002907",
                      "MONDO:0001187"
                  ]
              }
      responses:
        '200':
          description: >-
            OK. There may or may not be results. Note that some of the provided
            identifiers may not have been recognized.
          content:
            application/json:
              schema:
                additionalProperties:
                  description: Mapping from OMOP concept to Biolink
                  type: object
                  properties:
                    distance:
                      description: mapping distance
                      type: integer
                    omop_concept_id:
                      type: integer
                    omop_concept_name:
                      type: string
              example: >-
                {
                  "MONDO:0001187": {
                    "distance": 2,
                    "omop_concept_id": 197508,
                    "omop_concept_name": "Malignant tumor of urinary bladder"
                  }
                }
        '400':
          description: >-
            Bad request. The request is invalid according to this OpenAPI
            schema OR a specific identifier is believed to be invalid somehow
            (not just unrecognized).
          content:
            application/json:
              schema:
                type: string
        '500':
          description: >-
            Internal server error.
          content:
            application/json:
              schema:
                type: string
  /translator/omop_to_biolink:
    post:
      tags:
        - translator
      summary: 'Map from OMOP to Biolink'
      description: >-
        Map OMOP concepts to normalized Biolink nodes using SRI Node Normalizer.
      operationId: omop_to_biolink
      requestBody:
        description: List of OMOP IDs
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OmopList'
            example: >-
              {
                  "omop_ids": [
                      78472,
                      197508
                  ]
              }
      responses:
        '200':
          description: >-
            OK. There may or may not be results. Note that some of the provided
            identifiers may not have been recognized.
            Mapping from OMOP concept to Biolink normalized nodes. See
            [SRI Node Normalizer](https://nodenormalization-sri.renci.org/docs#/) for response format
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                example: >-
                  {
                    "197508": {
                      "equivalent_identifiers": [
                          {
                              "identifier": "MONDO:0001187",
                              "label": "urinary bladder cancer"
                          },
                          {
                              "identifier": "DOID:11054"
                          },
                          {
                              "identifier": "OMIM:109800"
                          },
                          {
                              "identifier": "UMLS:C0005684"
                          },
                          {
                              "identifier": "NCIT:C9334"
                          },
                          {
                              "identifier": "SNOMEDCT:399326009"
                          }
                      ],
                      "id": {
                          "identifier": "MONDO:0001187",
                          "label": "urinary bladder cancer"
                      },
                      "type": [
                          "biolink:Disease",
                          "biolink:DiseaseOrPhenotypicFeature",
                          "biolink:BiologicalEntity",
                          "biolink:NamedThing"
                      ]
                    }
                  }
        '400':
          description: >-
            Bad request. The request is invalid according to this OpenAPI
            schema OR a specific identifier is believed to be invalid somehow
            (not just unrecognized).
          content:
            application/json:
              schema:
                type: string
        '500':
          description: >-
            Internal server error.
          content:
            application/json:
              schema:
                type: string
components:
  schemas:
    CurieList:
      description: list of CURIEs
      type: object
      properties:
        curies:
          title: "list of CURIEs"
          type: array
          items:
            type: string
    OmopList:
      description: list of OMOP IDs
      type: object
      properties:
        curies:
          title: "list of OMOP IDs"
          type: array
          items:
            type: integer
    QueryOptions:
      description: Additional query options that apply to COHD
      type: object
      properties:
        max_results:
          description: "The maximum number of results to be returned."
          type: integer
          example: 10
        dataset_id:
          description: "The COHD dataset to query"
          type: integer
          example: 3
        confidence_interval:
          description: "Criteria that the results are significant to the specified criteria level. This only applies when the method is 'obsExpRatio'. Default: not required."
          type: number
          example: 0.99
        min_cooccurrence:
          description: "Criteria that the results have a minimum co-occurrence count. Default: not required."
          type: integer
          example: 50
        threshold:
          description: "Criteria threshold to apply to the association metric. chiSquare: p-value < threshold. obsExpRatio: abs(ln_ratio) >= threshold. relativeFrequency: relative_frequency >= threshold."
          type: number
          example: 0.5
        local_oxo:
          description: "Whether to use the local implementation of OxO or the real implementation of OxO. Note, the local OxO implementation may contain outdated definitions and xrefs but runs faster. The real OxO has the most updated definitions and xrefs, but is slower (~1-2 seconds/concept). Default: true"
          type: boolean
          example: false
        biolink_only:
          description: "Whether to only include nodes in the knowledge graph and results that are Biolink compliant (as defined by ontology_targets). Default: true"
          type: boolean
          example: true
    Query:
      description: >-
        The Query class is used to package a user request for information. A
        Query object consists of a required Message object with optional
        additional properties. Additional properties are intended to convey
        implementation-specific or query-independent parameters. For example,
        an additional property specifying a log level could allow a user to
        override the default log level in order to receive more fine-grained
        log information when debugging an issue.
      x-body-name: request_body
      type: object
      properties:
        message:
          $ref: '#/components/schemas/Message'
          description: >-
            The query Message is a serialization of the user request. Content
            of the Message object depends on the intended TRAPI operation. For
            example, the fill operation requires a non-empty query_graph field
            as part of the Message, whereas other operations, e.g. overlay,
            require non-empty results and knowledge_graph fields.
        log_level:
          description: The least critical level of logs to return
          allOf:
            - $ref: '#/components/schemas/LogLevel'
          nullable: true
      additionalProperties: true
      required:
        - message
    Response:
      type: object
      description: >-
        The Response object contains the main payload when a TRAPI query
        endpoint interprets and responds to the submitted query successfully
        (i.e., HTTP Status Code 200). The message property contains the
        knowledge of the response (query graph, knowledge graph, and results).
        The status, description, and logs properties provide additional details
        about the response.
      properties:
        message:
          description: >-
            Contains the knowledge of the response (query graph, knowledge
            graph, and results).
          $ref: '#/components/schemas/Message'
        status:
          description: >-
            One of a standardized set of short codes,
            e.g. Success, QueryNotTraversable, KPsNotAvailable
          type: string
          example: Success
          nullable: true
        description:
          description: A brief human-readable description of the outcome
          type: string
          example: Success. 42 results found.
          nullable: true
        logs:
          description: >-
            Log entries containing errors, warnings, debugging information, etc
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
          nullable: true
      additionalProperties: true
      required:
        - message
    Message:
      description: >-
        The message object holds the main content of a Query or a Response in
        three properties: query_graph, results, and knowledge_graph.
        The query_graph property contains the query configuration, the results
        property contains any answers that are returned by the service,
        and knowledge_graph property contains lists of edges and nodes in the
        thought graph corresponding to this message. The content of these
        properties is context-dependent to the encompassing object and
        the TRAPI operation requested.
      type: object
      properties:
        results:
          description: >-
            List of all returned Result objects for the query posed.
            The list SHOULD NOT be assumed to be ordered. The 'score' property,
             if present, MAY be used to infer result rankings.
          type: array
          items:
            $ref: '#/components/schemas/Result'
          nullable: true
        query_graph:
          description: >-
            QueryGraph object that contains a serialization of a query in the
            form of a graph
          allOf:
            - $ref: '#/components/schemas/QueryGraph'
          nullable: true
        knowledge_graph:
          description: >-
            KnowledgeGraph object that contains lists of nodes and edges
            in the thought graph corresponding to the message
          allOf:
            - $ref: '#/components/schemas/KnowledgeGraph'
          nullable: true
      additionalProperties: false
    LogEntry:
      description: >-
        The LogEntry object contains information useful for tracing
        and debugging across Translator components.  Although an
        individual component (for example, an ARA or KP) may have its
        own logging and debugging infrastructure, this internal
        information is not, in general, available to other components.
        In addition to a timestamp and logging level, LogEntry
        includes a string intended to be read by a human, along with
        one of a standardized set of codes describing the condition of
        the component sending the message.
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp in ISO 8601 format
          example: '2020-09-03T18:13:49+00:00'
          nullable: true
        level:
          allOf:
            - $ref: '#/components/schemas/LogLevel'
          nullable: true
        code:
          type: string
          description: >-
            One of a standardized set of short codes
            e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed
          nullable: true
        message:
          type: string
          description: A human-readable log message
          nullable: true
      additionalProperties: true
    LogLevel:
      type: string
      description: Logging level
      enum:
        - ERROR
        - WARNING
        - INFO
        - DEBUG
    Result:
      type: object
      description: >-
        A Result object specifies the nodes and edges in the knowledge graph
        that satisfy the structure or conditions of a user-submitted query
        graph. It must contain a NodeBindings object (list of query graph node
        to knowledge graph node mappings) and an EdgeBindings object (list of
        query graph edge to knowledge graph edge mappings).
      properties:
        node_bindings:
          type: object
          description: >-
            The dictionary of Input Query Graph to Result Knowledge Graph node
            bindings where the dictionary keys are the key identifiers of the
            Query Graph nodes and the associated values of those keys are
            instances of NodeBinding schema type (see below). This value is an
            array of NodeBindings since a given query node may have multiple
            knowledge graph Node bindings in the result.
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/NodeBinding'
        edge_bindings:
          type: object
          description: >-
            The dictionary of Input Query Graph to Result Knowledge Graph edge
            bindings where the dictionary keys are the key identifiers of the
            Query Graph edges and the associated values of those keys are
            instances of EdgeBinding schema type (see below). This value is an
            array of EdgeBindings since a given query edge may resolve to
            multiple knowledge graph edges in the result.
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/EdgeBinding'
        score:
          type: number
          format: float
          example: 163.233
          description: >-
            A numerical score associated with this result indicating the
            relevance or confidence of this result relative to others in the
            returned set. Higher MUST be better.
      additionalProperties: true
      required:
        - node_bindings
        - edge_bindings
    NodeBinding:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CURIE'
          description: >-
            An instance of NodeBinding is a single KnowledgeGraph Node mapping,
            identified by the corresponding 'id' object key identifier of the
            Node within the Knowledge Graph. Instances of NodeBinding may
            include extra annotation (such annotation is not yet fully
            standardized).
      additionalProperties: true
      required:
        - id
    EdgeBinding:
      type: object
      description: >-
        A instance of EdgeBinding is a single KnowledgeGraph Edge mapping,
        identified by the corresponding 'id' object key identifier of the
        Edge within the Knowledge Graph. Instances of EdgeBinding may include
        extra annotation (such annotation is not yet fully standardized).
      properties:
        id:
          type: string
          description: The key identifier of a specific KnowledgeGraph Edge.
      additionalProperties: true
      required:
        - id
    KnowledgeGraph:
      type: object
      description: >-
        The knowledge graph associated with a set of results. The instances
        of Node and Edge defining this graph represent instances of
        biolink:NamedThing (concept nodes) and biolink:Association
        (relationship edges) representing (Attribute) annotated knowledge
        returned from the knowledge sources and inference agents wrapped by
        the given TRAPI implementation.
      properties:
        nodes:
          type: object
          description: >-
            Dictionary of Node instances used in the KnowledgeGraph,
            referenced elsewhere in the TRAPI output by the dictionary key.
          additionalProperties:
            $ref: '#/components/schemas/Node'
        edges:
          type: object
          description: >-
            Dictionary of Edge instances used in the KnowledgeGraph,
            referenced elsewhere in the TRAPI output by the dictionary key.
          additionalProperties:
            $ref: '#/components/schemas/Edge'
      additionalProperties: true
      required:
        - nodes
        - edges
    QueryGraph:
      type: object
      description: >-
        A graph representing a biomedical question. It serves as a template for
        each result (answer), where each bound knowledge graph node/edge is
        expected to obey the constraints of the associated query graph element.
      properties:
        nodes:
          type: object
          description: >-
            The node specifications. The keys of this map are unique node
            identifiers and the corresponding values include the constraints
            on bound nodes.
          additionalProperties:
            $ref: '#/components/schemas/QNode'
        edges:
          type: object
          description: >-
            The edge specifications. The keys of this map are unique edge
            identifiers and the corresponding values include the constraints
            on bound edges, in addition to specifying the subject and object
            QNodes.
          additionalProperties:
            $ref: '#/components/schemas/QEdge'
      additionalProperties: true
      required:
        - nodes
        - edges
    QNode:
      type: object
      description: A node in the QueryGraph used to represent an entity in a
        query. If a CURIE is not specified, any nodes matching the category
        of the QNode will be returned in the Results.
      properties:
        ids:
          type: array
          items:
            $ref: '#/components/schemas/CURIE'
          minItems: 1
          example: [OMIM:603903]
          description: CURIE identifier for this node
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/BiolinkEntity'
          minItems: 1
          nullable: true
        is_set:
          type: boolean
          description: >-
            Boolean that if set to true, indicates that this QNode MAY have
            multiple KnowledgeGraph Nodes bound to it within each Result.
            The nodes in a set should be considered as a set of independent
            nodes, rather than a set of dependent nodes, i.e., the answer
            would still be valid if the nodes in the set were instead returned
            individually. Multiple QNodes may have is_set=True. If a QNode
            (n1) with is_set=True is connected to a QNode (n2) with
            is_set=False, each n1 must be connected to n2. If a QNode (n1)
            with is_set=True is connected to a QNode (n2) with is_set=True,
            each n1 must be connected to at least one n2.
          default: false
        constraints:
          type: array
          description: >-
            A list of contraints applied to a query node.
            If there are multiple items, they must all be true (equivalent
            to AND)
          items:
            $ref: '#/components/schemas/QueryConstraint'
          nullable: true
      additionalProperties: true
    QEdge:
      type: object
      description: >-
        An edge in the QueryGraph used as an filter pattern specification in a
        query. If optional predicate or relation properties are not specified,
        they are assumed to be wildcard matches to the target knowledge space.
        If specified, the ontological inheritance hierarchy associated with
        the terms provided is assumed, such that edge bindings returned may be
        an exact match to the given QEdge predicate or relation term ('class'),
        or to a term which is a subclass of the QEdge specified term.
      properties:
        predicates:
          type: array
          items:
            $ref: '#/components/schemas/BiolinkPredicate'
          minItems: 1
          nullable: true
        relation:
          type: string
          example: RO:0002447
          description: >-
            Query constraint against the relationship type term of this edge,
            as originally specified by, or curated by inference from, the
            original external source of knowledge. Note that this should
            often be specified as predicate ontology term CURIE, although
            this may not be strictly enforced.
          nullable: true
        subject:
          type: string
          example: https://omim.org/entry/603903
          description: >-
            Corresponds to the map key identifier of the
            subject concept node anchoring the query filter
            pattern for the query relationship edge.
        object:
          type: string
          example: https://www.uniprot.org/uniprot/P00738
          description: >-
            Corresponds to the map key identifier of the
            object concept node anchoring the query filter
            pattern for the query relationship edge.
        constraints:
          type: array
          description: >-
            A list of contraints applied to a query edge.
            If there are multiple items, they must all be true (equivalent
            to AND)
          items:
            $ref: '#/components/schemas/QueryConstraint'
          nullable: true
      additionalProperties: true
      required:
        - subject
        - object
    Node:
      type: object
      description: >-
        A node in the KnowledgeGraph which represents some biomedical
        concept. Nodes are identified by the keys in the KnowledgeGraph
        Node mapping.
      properties:
        name:
          type: string
          example: Haptoglobin
          description: Formal name of the entity
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/BiolinkEntity'
          nullable: true
        attributes:
          type: array
          description: A list of attributes describing the node
          items:
            $ref: '#/components/schemas/Attribute'
          nullable: true
      additionalProperties: false
    Attribute:
      type: object
      description: >-
        Generic attribute for a node or an edge that expands the key-value
        pair concept by including fields for additional metadata. These fields
        can be used to describe the source of the statement made in key-value
        pair of the attribute object, or describe the attribute's value itself
        including its semantic type, or a url providing additional information
        about it.
      properties:
        attribute_type_id:
          $ref: '#/components/schemas/CURIE'
          description: >-
            The 'key' of the attribute object, holding a CURIE of an ontology
            property defining the attribute (preferably the CURIE of a
            Biolink association slot). This property captures the relationship
            asserted to hold between the value of the attribute, and the node
            or edge from  which it hangs. For example, that a value of
            '0.000153' represents a p-value supporting an edge, or that
            a value of 'ChEMBL' represents the original source of the knowledge
            expressed in the edge.
          example: Biolink:has_p-value_evidence, Biolink:has_original_source
        original_attribute_name:
          type: string
          description: >-
            The term used by the original source of an attribute to describe
            the meaning or significance of the value it captures. This may be
            a column name in a source tsv file, or a key in a source json
            document for the field in the data that held the attribute's
            value. Capturing this information  where possible lets us preserve
            what the original source said. Note that the data type is string'
            but the contents of the field could also be a CURIE of a third
            party ontology term.
          example: p-value
          nullable: true
        value:
          description: >-
            Value of the attribute. May be any data type, including a list.
          example: 0.000153
        value_type_id:
          allOf:
            - $ref: '#/components/schemas/CURIE'
          description: >-
            CURIE describing the semantic type of an  attribute's value. Use
            a Biolink class if possible, otherwise a term from an external
            ontology. If a suitable CURIE/identifier does not exist, enter a
            descriptive phrase here and submit the new type for consideration
            by the appropriate authority.
          example: EDAM:data_1187
          nullable: true
        attribute_source:
          type: string
          description: >-
            The source of the core assertion made by the key-value pair of an
            attribute object. Use a CURIE or namespace designator for this
            resource where possible.
          example: UniProtKB
          nullable: true
        value_url:
          type: string
          description: >-
            Human-consumable URL linking to a web document that provides
            additional information about an  attribute's value (not the node
            or the edge fom which it hangs).
          example: https://pubmed.ncbi.nlm.nih.gov/32529952
          nullable: true
        description:
          type: string
          description: >-
            Human-readable description for the attribute and its value.
          example: Assertion Authored By Dr. Trans L. Ator
          nullable: true
      required:
        - attribute_type_id
        - value
      additionalProperties: false
    Edge:
      type: object
      description: >-
        A specification of the semantic relationship linking two concepts
        that are expressed as nodes in the knowledge "thought" graph
        resulting from a query upon the underlying knowledge source.
      properties:
        predicate:
          allOf:
            - $ref: '#/components/schemas/BiolinkPredicate'
          nullable: true
        relation:
          type: string
          example: RO:0002447
          description: >-
            The relationship type term of this edge, originally specified by,
            or curated by inference from, the original source of knowledge.
            This should generally be specified as predicate ontology CURIE.
          nullable: true
        subject:
          $ref: '#/components/schemas/CURIE'
          example: OMIM:603903
          description: >-
            Corresponds to the map key CURIE of the
            subject concept node of this relationship edge.
        object:
          $ref: '#/components/schemas/CURIE'
          example: UniProtKB:P00738
          description: >-
            Corresponds to the map key CURIE of the
            object concept node of this relationship edge.
        attributes:
          type: array
          description: A list of additional attributes for this edge
          items:
            $ref: '#/components/schemas/Attribute'
          nullable: true
      additionalProperties: false
      required:
        - subject
        - object
    BiolinkEntity:
      description: >-
        Compact URI (CURIE) for a Biolink class, biolink:NamedThing
        or a child thereof. The CURIE must use the prefix 'biolink:'
        followed by the PascalCase class name.
      type: string
      pattern: ^biolink:[A-Z][a-zA-Z]*$
      externalDocs:
        description: Biolink model entities
        url: https://biolink.github.io/biolink-model/docs/NamedThing.html
      example: biolink:PhenotypicFeature
    BiolinkPredicate:
      description: >-
        CURIE for a Biolink 'predicate' slot, taken from the Biolink slot
        ('is_a') hierarchy rooted in biolink:related_to (snake_case). This
        predicate defines the Biolink relationship between the subject and
        object nodes of a biolink:Association defining a knowledge graph edge.
      type: string
      pattern: ^biolink:[a-z][a-z_]*$
      externalDocs:
        description: Biolink model predicates
        url: https://biolink.github.io/biolink-model/docs/related_to.html
      example: biolink:interacts_with
    CURIE:
      type: string
      description: >-
        A Compact URI, consisting of a prefix and a reference separated
        by a colon, such as UniProtKB:P00738. Via an external context
        definition, the CURIE prefix and colon may be replaced by a URI
        prefix, such as http://identifiers.org/uniprot/, to form a full
        URI.
      externalDocs:
        url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
    MetaKnowledgeGraph:
      type: object
      description: >-
        Knowledge-map representation of this TRAPI web service. The meta
        knowledge graph is composed of the union of most specific categories
        and predicates for each node and edge.
      properties:
        nodes:
          type: object
          description: >-
            Collection of the most specific node categories provided by
            this TRAPI web service, indexed by Biolink class CURIEs.
            A node category is only exposed here if there is
            node for which that is the most specific category available.
          additionalProperties:
            $ref: '#/components/schemas/MetaNode'
        edges:
          type: array
          description: >-
            List of the most specific edges/predicates provided by this TRAPI
            web service. A predicate is only exposed here if there is an edge
            for which the predicate is the most specific available.
          items:
            $ref: '#/components/schemas/MetaEdge'
          minItems: 1
    MetaNode:
      type: object
      description: >-
        Description of a node category provided by this TRAPI web service.
      properties:
        id_prefixes:
          type: array
          description: >-
            List of CURIE prefixes for the node category that this TRAPI web
            service understands and accepts on the input.
          items:
            type: string
          minItems: 1
          example: [CHEMBL.COMPOUND, INCHIKEY]
      required:
        - id_prefixes
      additionalProperties: false
    MetaEdge:
      type: object
      description: >-
        Edge in a meta knowledge map describing relationship between a subject
        Biolink class and an object Biolink class.
      properties:
        subject:
          $ref: '#/components/schemas/BiolinkEntity'
          description: >-
            Subject node category of this relationship edge.
          example: biolink:ChemicalSubstance
        predicate:
          $ref: '#/components/schemas/BiolinkPredicate'
          description: >-
            Biolink relationship between the subject and object categories.
          example: biolink:affects
        object:
          $ref: '#/components/schemas/BiolinkEntity'
          description: >-
            Object node category of this relationship edge.
          example: biolink:Protein
        relations:
          type: array
          description: >-
            Low-level relations from the underlying source.
          items:
            type: string
          example: [inhibits, activates]
      required:
        - subject
        - predicate
        - object
      additionalProperties: false
    QueryConstraint:
      type: object
      description: >-
        Generic query constraint for a query node or query edge
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/CURIE'
          description: >-
            CURIE of the concept being constrained. For properties
            defined by the Biolink model this SHOULD be a biolink CURIE.
            otherwise, if possible, from the EDAM ontology. If a suitable
            CURIE does not exist, enter a descriptive phrase here and
            submit the new type for consideration by the appropriate
            authority.
          example: EDAM:data_0844
          nullable: false
        name:
          type: string
          description: >-
            Human-readable name or label for the constraint concept.
            If appropriate, it SHOULD be the term name of the CURIE used
            as the 'id'. This is redundant but required for human
            readability.
          example: molecular mass
          nullable: false
        not:
          type: boolean
          default: false
        operator:
          type: string
          description: >-
            Relationship between the database value and the constraint value
            for the specified id. The operators ==, >, and < mean
            is exactly equal to, is greater than, and is less than,
            respectively. The 'matches' operator indicates that the value
            is a regular expression to be evaluated. If value is a list type,
            then at least one evaluation must be true (equivalent to OR).
            This means that the == operator with a list acts like a SQL 'IN'
            clause. The 'not' property negates the operator such that not
            and == means 'not equal to' (or 'not in' for a list), and not >
            means <=, and not < means >=, and not matches means does not
            match. The '==' operator SHOULD NOT be used in a manner that
            describes an "is a" subclass relationship for the parent QNode.
          enum:
            - ==
            - '>'
            - <
            - matches
        value:
          example: 57.0
          description: >-
            Value of the attribute. May be any data type, including a list.
            If the value is a list and there are multiple items, at least one
            comparison must be true (equivalent to OR). If 'value' is of data
            type 'object', the keys of the object MAY be treated as a list.
            A 'list' data type paired with the '>' or '<' operators will
            encode extraneous comparisons, but this is permitted as it is in
            SQL and other languages.
        unit_id:
          example: UO:0000222
          description: >-
            CURIE of the units of the value or list of values in the 'value'
            property. The Units of Measurement Ontology (UO) should be used
            if possible. The unit_id MUST be provided for (lists of)
            numerical values that correspond to a quantity that has units.
        unit_name:
          example: kilodalton
          description: >-
            Term name that is associated with the CURIE of the units
            of the value or list of values in the 'value'
            property. The Units of Measurement Ontology (UO) SHOULD be used
            if possible. This property SHOULD be provided if a unit_id is
            provided. This is redundant but recommended for human readability.
      required:
        - name
        - id
        - operator
        - value
      additionalProperties: false
  x-bte-kgs-response-mappings:
    chi_square:
      biolink:OMOP: results.concept_id_2
      biolink:name: results.concept_2_name
      biolink:has_count: results.n_c1_c2
      biolink:p_value: results.adj_p-value
      biolink:chi_squared_statistic: results.chi_square
    obs_exp_ratio:
      biolink:OMOP: results.concept_id_2
      biolink:name: results.concept_2_name
      biolink:has_count: results.observed_count
    relative_frequency:
      biolink:OMOP: results.concept_id_2
      biolink:name: results.concept_2_name
      biolink:has_count: results.concept_pair_count
      biolink:has_total: results.concept_2_count
      biolink:has_quotient: results.relative_frequency
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  securitySchemes: {}
  headers: {}
  links: {}
  callbacks: {}
security: []
